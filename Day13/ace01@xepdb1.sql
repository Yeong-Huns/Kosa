SELECT EMPNO , SAL 
FROM EMP
ORDER BY SAL DESC;

SET SERVEROUTPUT ON;


CREATE OR REPLACE PROCEDURE PROC1(PNUM EMP.EMPNO%TYPE) IS
VNUM EMP.EMPNO%TYPE;
VSAL EMP.SAL%TYPE;
BEGIN
SELECT EMPNO, SAL INTO VNUM, VSAL
FROM EMP
WHERE EMPNO = PNUM;

CASE 
WHEN VSAL >= 3000 THEN DBMS_OUTPUT.PUT_LINE('번호 : '||VNUM||' , 월급 : '||VSAL||' 등급 : A');
WHEN VSAL >= 2000 THEN DBMS_OUTPUT.PUT_LINE('번호 : '||VNUM||' , 월급 : '||VSAL||' 등급 : B');
ELSE DBMS_OUTPUT.PUT_LINE('번호 : '||VNUM||' , 월급 : '||VSAL||' 등급 : C');
END CASE;
EXCEPTION
WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE(PNUM||'사원은 없습니다!!');
WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('에러');
END;
/
EXECUTE PROC1(7369);
EXECUTE PROC1(7788);
EXECUTE PROC1(7782);



CREATE OR REPLACE PROCEDURE PROC1_1(PNUM EMP.EMPNO%TYPE) IS
VNUM EMP.EMPNO%TYPE;
VSAL EMP.SAL%TYPE;
BEGIN
SELECT EMPNO, SAL INTO VNUM, VSAL
FROM EMP
WHERE EMPNO = PNUM;

IF VSAL >= 3000 THEN DBMS_OUTPUT.PUT_LINE('번호 : '||VNUM||' , 월급 : '||VSAL||' 등급 : A');
ELSIF VSAL >= 2000 THEN DBMS_OUTPUT.PUT_LINE('번호 : '||VNUM||' , 월급 : '||VSAL||' 등급 : B');
ELSE DBMS_OUTPUT.PUT_LINE('번호 : '||VNUM||' , 월급 : '||VSAL||' 등급 : C');
END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE(PNUM||'사원은 없습니다!');
WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('에러_발생');
END;
/
EXECUTE PROC1_1(7369);
EXECUTE PROC1_1(7788);
EXECUTE PROC1_1(7782);



CREATE OR REPLACE FUNCTION FN_SAL_GRADE(PSAL EMP.SAL%TYPE) 
RETURN VARCHAR2 IS
BEGIN
CASE
WHEN PSAL >= 3000 THEN RETURN 'A';
WHEN PSAL >= 2000 THEN RETURN 'B';
ELSE RETURN 'C';
END CASE;
END;
/

CREATE OR REPLACE PROCEDURE PROC1_2(PNUM EMP.EMPNO%TYPE) IS
VNUM EMP.EMPNO%TYPE;
VSAL EMP.SAL%TYPE;
BEGIN
SELECT EMPNO, SAL INTO VNUM, VSAL
FROM EMP
WHERE EMPNO = PNUM;

CASE 
WHEN VSAL >= 3000 THEN DBMS_OUTPUT.PUT_LINE('번호 : '||VNUM||' , 월급 : '||VSAL||' 등급 : A');
WHEN VSAL >= 2000 THEN DBMS_OUTPUT.PUT_LINE('번호 : '||VNUM||' , 월급 : '||VSAL||' 등급 : B');
ELSE DBMS_OUTPUT.PUT_LINE('번호 : '||VNUM||' , 월급 : '||VSAL||' 등급 : '||FN_SAL_GRADE(VSAL));
END CASE;
EXCEPTION
WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE(PNUM||'사원은 없습니다!!');
WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('에러');
END;
/
EXECUTE PROC1_2(7369);
EXECUTE PROC1_2(7788);
EXECUTE PROC1_2(7782);

--FUNCTION 을 이용한 방법

CREATE OR REPLACE PROCEDURE PROC1_3(PNUM EMP.EMPNO%TYPE) IS 
ENUM EMP.EMPNO%TYPE;
ESAL EMP.SAL%TYPE;
EGRADE VARCHAR2(1);
BEGIN
SELECT EMPNO, SAL, DECODE(TRUNC(SAL/1000), 0, 'C', 1, 'C', 2, 'B', 'A')
INTO ENUM, ESAL, EGRADE
FROM EMP
WHERE EMPNO = PNUM;
DBMS_OUTPUT.PUT_LINE('번호 : '||ENUM||' , 월급 : '||ESAL||' 등급 : '||EGRADE);
END;
/
EXECUTE PROC1_3(7369);
EXECUTE PROC1_3(7788);
EXECUTE PROC1_3(7782);

BEGIN 
FOR I IN 1..100 LOOP 
IF MOD(I, 2) = 0 THEN DBMS_OUTPUT.PUT_LINE('번호 : '||I);
END IF;
END LOOP;
END;
/

DECLARE
RS NUMBER;
BEGIN
FOR I IN 1..9 LOOP
FOR J IN 1..9 LOOP
RS := I * J;
CONTINUE WHEN RS > 60;
DBMS_OUTPUT.PUT_LINE(I||' * '||J||' = '||RS);
END LOOP;
DBMS_OUTPUT.PUT_LINE('');
END LOOP;
END;
/


DECLARE
RS NUMBER;
BEGIN
FOR I IN 1..9 LOOP
FOR J IN 1..9 LOOP
RS := I * J;
CONTINUE WHEN RS > 60;
DBMS_OUTPUT.PUT_LINE(I||' * '||J||' = '||RS);
END LOOP;
DBMS_OUTPUT.PUT_LINE('');
END LOOP;
END;
/

CREATE OR REPLACE PROCEDURE GUGUDAN1(VNUM NUMBER) IS
RS NUMBER := VNUM;
BEGIN
FOR J IN 1..9 LOOP
DBMS_OUTPUT.PUT_LINE(RS||' * '||J||' = '||RS*J);
END LOOP;
END;
/
EXECUTE GUGUDAN1(9);

CREATE OR REPLACE PROCEDURE GUGUDAN2(VNUM NUMBER, VNUM2 NUMBER) IS
RS NUMBER;
BEGIN
FOR I IN VNUM..VNUM2 LOOP
FOR J IN 1..9 LOOP
RS := I * J;
DBMS_OUTPUT.PUT_LINE(I||' * '||J||' = '||RS);
END LOOP;
DBMS_OUTPUT.PUT_LINE('');
END LOOP;
END;
/
EXECUTE GUGUDAN2(3,7);

CREATE OR REPLACE PROCEDURE GUGUDAN3(VNUM NUMBER, VNUM2 NUMBER, VNUM3 NUMBER) IS
RS NUMBER;
CUT NUMBER := VNUM3;
BEGIN
FOR I IN VNUM..VNUM2 LOOP
FOR J IN 1..9 LOOP
RS := I * J;
CONTINUE WHEN RS >= CUT;
DBMS_OUTPUT.PUT_LINE(I||' * '||J||' = '||RS);
END LOOP;
DBMS_OUTPUT.PUT_LINE('');
END LOOP;
END;
/
EXECUTE GUGUDAN3(3,7, 40);













CREATE OR REPLACE PACKAGE MATH  -- 패키지 스펙이라고 함
IS 
PROCEDURE GUGUDAN(VNUM NUMBER);
PROCEDURE GUGUDAN(VNUM NUMBER, VNUM2 NUMBER);
PROCEDURE GUGUDAN(VNUM NUMBER, VNUM2 NUMBER, VNUM3 NUMBER);
END;
/

CREATE OR REPLACE PACKAGE BODY MATH
IS 
PROCEDURE GUGUDAN(VNUM NUMBER) IS
RS NUMBER := VNUM;
BEGIN
FOR J IN 1..9 LOOP
DBMS_OUTPUT.PUT_LINE(RS||' * '||J||' = '||RS*J);
END LOOP;
END;

PROCEDURE GUGUDAN(VNUM NUMBER, VNUM2 NUMBER) IS
RS NUMBER;
BEGIN
FOR I IN VNUM..VNUM2 LOOP
FOR J IN 1..9 LOOP
RS := I * J;
DBMS_OUTPUT.PUT_LINE(I||' * '||J||' = '||RS);
END LOOP;
DBMS_OUTPUT.PUT_LINE('');
END LOOP;
END;

PROCEDURE GUGUDAN(VNUM NUMBER, VNUM2 NUMBER, VNUM3 NUMBER) IS
RS NUMBER;
CUT NUMBER := VNUM3;
BEGIN
FOR I IN VNUM..VNUM2 LOOP
FOR J IN 1..9 LOOP
RS := I * J;
CONTINUE WHEN RS >= CUT;
DBMS_OUTPUT.PUT_LINE(I||' * '||J||' = '||RS);
END LOOP;
DBMS_OUTPUT.PUT_LINE('');
END LOOP;
END;

END;
/

EXEC MATH.GUGUDAN(3);
EXEC MATH.GUGUDAN(3, 7);
EXEC MATH.GUGUDAN(2, 9, 50);


CREATE OR REPLACE PACKAGE EMP_TYPES_PACK 
IS
TYPE R1 IS RECORD (
RNAME EMP.ENAME%TYPE, 
RSAL EMP.SAL%TYPE,
RJOB EMP.JOB%TYPE
);
END;
/

--전통적인 방법
CREATE OR REPLACE PROCEDURE PROC1(ENUM EMP.EMPNO%TYPE)
IS 
VSAL EMP.SAL%TYPE;
BEGIN 
SELECT SAL INTO VSAL
FROM EMP 
WHERE EMPNO = ENUM; 
DBMS_OUTPUT.PUT_LINE(VSAL);
END;
/
EXEC PROC1(7788);

--레코드를 이용하는 방법
CREATE OR REPLACE PROCEDURE PROC2(ENUM EMP.EMPNO%TYPE)
IS 
EMP_REC EMP%ROWTYPE;
BEGIN 
SELECT * INTO EMP_REC
FROM EMP 
WHERE EMPNO = ENUM; 
DBMS_OUTPUT.PUT_LINE(EMP_REC.SAL);
END;
/
EXEC PROC2(7788);

--커스텀 레코드를 만드는 방법
CREATE OR REPLACE PROCEDURE PROC3(ENUM EMP.EMPNO%TYPE)
IS 
TYPE R1 IS RECORD (
RNAME EMP.ENAME%TYPE, 
RSAL EMP.SAL%TYPE,
RJOB EMP.JOB%TYPE
);
REC R1;
BEGIN 
SELECT ENAME, SAL, JOB INTO REC.RNAME, REC.RSAL, REC.RJOB
FROM EMP 
WHERE EMPNO = ENUM; 
DBMS_OUTPUT.PUT_LINE(REC.RNAME);
DBMS_OUTPUT.PUT_LINE(REC.RSAL);
DBMS_OUTPUT.PUT_LINE(REC.RJOB);
END;
/
EXEC PROC3(7788);

SELECT * FROM TAB;

CREATE OR REPLACE PROCEDURE MY_PROC1(PNUM EMP.EMPNO%TYPE) IS
VNUM EMP.EMPNO%TYPE;
VNAME EMP.ENAME%TYPE;
BEGIN 
SELECT EMPNO, ENAME INTO VNUM, VNAME
FROM EMP
WHERE EMPNO = PNUM;
DBMS_OUTPUT.PUT_LINE('사원 번호 : '||VNUM||' , 사원 이름 : '||VNAME);
END;
/
EXEC MY_PROC1(7788);

--패키지를 새로만듬.!
CREATE OR REPLACE PACKAGE EMP_TYPES_PACK 
IS
TYPE R1 IS RECORD (
RNAME EMP.ENAME%TYPE, 
RSAL EMP.SAL%TYPE,
RJOB EMP.JOB%TYPE
);
END;
/
-- 패키지에 만들어둔 RECORD 를 사용
CREATE OR REPLACE PROCEDURE PROC4(ENUM EMP.EMPNO%TYPE)
IS 
REC_EMP EMP_TYPES_PACK.R1;
BEGIN 
SELECT ENAME,SAL,JOB INTO REC_EMP
FROM EMP
WHERE EMPNO = ENUM; 
DBMS_OUTPUT.PUT_LINE('이 름 : '||REC_EMP.RNAME||' , 연 봉 : '||REC_EMP.RSAL||', 직 업 : '||REC_EMP.RJOB);
END;
/

EXEC PROC4(7788);


SET SERVEROUTPUT ON;

GRANT EXECUTE 
ON MEP_TYPES_PACK
TO PUBLIC ;


CREATE OR REPLACE VIEW V1 
AS 
SELECT ENAME, SAL, JOB 
FROM EMP;



CREATE OR REPLACE PROCEDURE PROC1(P_DNUM EMP.DEPTNO%TYPE)
IS 
TYPE TAB1 IS TABLE OF EMP.SAL%TYPE INDEX BY PLS_INTEGER;
T1 TAB1;
BEGIN 
SELECT SAL BULK COLLECT INTO T1
FROM EMP 
WHERE DEPTNO = P_DNUM; 
FOR I IN T1.FIRST .. T1.LAST LOOP
DBMS_OUTPUT.PUT_LINE(T1(I));
END LOOP;
END;
/
EXEC PROC1(20);

CREATE OR REPLACE PROCEDURE PROC1(P_DNUM EMP.DEPTNO%TYPE)
IS 
TYPE TAB1 IS TABLE OF EMP%ROWTYPE INDEX BY PLS_INTEGER; 
T1 TAB1; 
BEGIN
SELECT * BULK COLLECT INTO T1
FROM EMP
WHERE DEPTNO = P_DNUM; 

FOR I IN T1.FIRST .. T1.LAST LOOP
DBMS_OUTPUT.PUT_LINE(T1(I).EMPNO);
DBMS_OUTPUT.PUT_LINE(T1(I).ENAME);
DBMS_OUTPUT.PUT_LINE('---------');
END LOOP;
END; 
/
EXEC PROC1(20);


  create or replace procedure proc1(p_deptno emp.deptno%type)
  is
    TYPE emp_record_type IS RECORD
    (empno emp.empno%type,
     ename emp.ename%type,
     sal   emp.sal%type,
     job   emp.job%type);

    TYPE emp_table_type IS TABLE OF emp_record_type
      INDEX BY pls_integer;

    emp_tab emp_table_type;
  begin
    select empno, ename, sal, job BULK COLLECT INTO emp_tab
    from emp
    where deptno = p_deptno;

    for i in emp_tab.first .. emp_tab.last loop
      dbms_output.put_line(emp_tab(i).empno);
      dbms_output.put_line(emp_tab(i).ename);
      dbms_output.put_line('-----');
    end loop;
  end;
  /
  exec proc1(20);



drop table t1 cascade constraints purge;
create table t1 as select employee_id, first_name from employees;


SELECT * FROM T1;

 drop table member cascade constraints purge;

  create table member
  (id     varchar2(10) primary key,
   name   varchar2(10),
   height number(5),
   weight number(5),
   age    number(5));

  insert into member values('001', 'Peter', 175, 67, 24);
  insert into member values('002', 'Diana', 188, 78, 31);
  insert into member values('003', 'Jennifer', 165, 48, 17);
  insert into member values('004', 'Bruce', 177, 78, 23);

  commit;

SELECT * FROM MEMBER;

/*


DECLARE 
I_NUM EMP.EMPNO%TYPE;
CURSOR C1 (E_NUM EMP.EMPNO%TYPE) IS
SELECT EMPNO, SAL
FROM EMP
WHERE EMPNO = E_NUM;
BEGIN 
I_NUM := &INPUT_EMPNO입력;
OPEN C1(I_NUM);
FETCH C1 INTO E_NUM;
CLOSE C1;
*/
