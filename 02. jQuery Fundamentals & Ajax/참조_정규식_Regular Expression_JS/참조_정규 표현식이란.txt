정규 표현식 
출처 : 위키백과 ― 우리 모두의 백과사전. 
 
정규 표현식(正規表現式, Regular expression에서 줄여서 Regexp 또는 Regex)은 특정한 규칙을 가
진 문자열의 집합을 표현하는 데 사용하는 형식 언어이다. 정규 표현식은 많은 텍스트 편집기와 
프로그래밍 언어에서 문자열의 검색과 치환을 위해 지원하고 있으며, 특히 펄과 Tcl은 언어 자체
에 강력한 정규 표현식 구현을 내장하고 있다. 
 
정규 표현식은 컴퓨터 과학의 정규 언어로부터 유래하였으나 구현체에 따라서 정규 언어보다 더 
넓은 언어를 표현할 수 있는 경우도 있으며, 심지어 정규 표현식 자체의 문법도 여러 가지 존재
하고 있다. 이 중 표준화된 것으로는 POSIX의 확장 정규 표현식이 있으며, 표준화되지는 않았지
만 펄의 정규 표현식과 그 대체 구현인 PCRE도 널리 사용된다 
 
< 문법 > 
몇몇 문자는 특정한 논리적 관계를 나타내는 기호로 쓰인다. 이를 제외한 나머지 문자는 일반적
인 문자를 나타낸다. 
 
① 선택 기호: "|" 기호는 여러 식 중에서 하나를 선택한다.  
예를 들어, "abc|adc"는 abc라는 문자열과 adc라는 문자열을 모두 포함한다.  
② 묶기 기호: "("와 ")"로 여러 식을 하나로 묶을 수 있다. "abc|adc"와 "a(b|d)c"는 같은 의미를  
가진다.  
③ 개수 기호: 문자 뒤에 붙어 문자의 개수를 나타낸다.  
④ "*" : 0개 이상. "a*b"는 "b", "ab", "aab", "aaab"를 포함한다.  
⑤ "+" : 1개 이상. "a+b"는 "ab", "aab", "aaab"를 포함하지만 "b"는 포함하지 않는다.  
⑥ "?" : 0개 또는 1개. "a?b"는 "b", "ab"를 포함한다.  
⑦ "{m, n}" : m개 이상 n개 이하. "a{1,3}b"는 "ab", "aab", "aaab"를 포함하지만, "b"나 "aaaab"는  
포함하지 않는다.  
이에 따라 "(fa|mo|br?o)ther"는 "father", "mother", "brother", "bother"를 나타낸다. 
 
많은 프로그래밍 언어에서는 이를 확장한 문법을 가지고 있다. 이 중 일반적으로 사용되는  
연산자는 다음과 같다. 
 
① "[ ]" : "["과 "]" 사이의 문자 중 하나를 선택한다. "|"를 여러 개 쓴 것과 같은 의미를 가진다.  
예를 들면 [abc]d는 ad, bd, cd를 뜻한다. 또한, "-" 기호와 함께 쓰면 문자의 범위를 지정할 수 
있다. "[a-z]"는 a부터 z까지 중 하나, "[1-9]"는 1부터 9까지 중의 하나를 뜻한다.  
② "[^]" : "[^"과 "]" 사이의 문자를 제외한 나머지 하나를 선택한다.  
예를 들면 [^abc]d는 ad, bd, cd는 포함하지 않고 ed, fd 등을 포함한다.  
[^a-z]는 알파벳 소문자로 시작하지 않는 모든 문자를 나타낸다.  
③ "^", "$" : 각각 문자열의 처음과 끝을 나타낸다.  
 
< 정규 표현식의 간략한 소개 > 
표현식(expression)이란 문자 그대로의 의미 이상으로 해석되는 메타문자(metacharacters)라고 부
르는 문자들의 집합을 말합니다. 예를 들어, 인용 부호(quote symbol)는 어떤 사람이 말한 것을 
나타내 주기도 하지만 또한 그 뒤에 나오는 심볼에 대해서 메타적 의미를 부여하기도 합니다. 정
규 표현식은 유닉스에 특별한 특징을 부여하는 문자들과 메타문자들의 집합입니다. 
 
정규 표현식은 주로 텍스트 탐색과 문자열 조작에 쓰입니다. 정규 표현식은 하나의 문자와 일치
(match)하거나, 혹은 문자열의 일부분(substring)이나 전체 문자열인 문자 집합들과 일치하게 됩니
다. 
 
① 별표(*)는 바로 앞의 문자열이나 정규 표현식에서 0개 이상 반복되는 문자를 나타냅니다. 
② "1133*" 은 11 + 하나 이상의 3 + 가능한 다른 문자들 을 나타냅니다 
  (예) 113, 1133, 11312, 기타 등등. 
 
③ 점(.)은 뉴라인을 제외한 오직 한 개의 글자와 일치합니다.  
④ "13." 은 13 + 빈칸을 포함한 최소 한 글자 를 나타냅니다 
(예) 1133, 11333, 하지만 13은 뒤에 한 글자가 빠져 있기 때문에 아닙니다. 
⑤ 캐럿(^)은 줄의 시작을 나타내지만 가끔 문맥에 따라서는 정규 표현식에서  
문자 집합의 의미를 반대로 해석해 줍니다. 
⑥ 정규 표현식의 제일 끝에 나오는 달러 표시($)는 줄 끝과 일치합니다. 
⑦ "^$" 는 빈 줄과 일치합니다. 
대괄호([...])는 단일 정규 표현식에서 표현하기 위해 문자들을 집합으로 묶어 줍니다. 
① "[xyz]" 는 x, y, z 중에 한 글자와 일치합니다. 
② "[c-n]" 는 c에서 n 사이에 들어 있는 한 문자와 일치합니다. 
③ "[B-Pk-y]" 는 B에서 P까지 중이나 k에서 y까지 중의 한 글자와 일치합니다. 
④ "[a-z0-9]" 는 소문자나 숫자중의 한 문자와 일치합니다. 
⑤ "[^b-d]" 는 b에서 d사이의 문자를 제외한 모든 문자를 나타냅니다.  
^은 바로 뒤에 나오는 정규 표현식의 의미를 반대로 해석하게 해 줍니다 
(다른 문맥에서 !의 의미와 비슷함). 
 
여러개의 대괄호로 묶인 문자들은 일반적인 낱말 패턴을 나타냅니다.  
① "[Yy][Ee][Ss]"는 yes, Yes, YES, yEs, 등등을 나타냅니다.  
② "[0-9][0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9][0-9]"는 주민등록번호와 일치합니다. 
 
역슬래쉬(\)는 특수 문자를 원래의 문자 의미대로 해석하게 해줍니다(escape). 
 
"\$" 는 정규 표현식에서 줄 끝(end-of-line)을 나타내는 의미대신 "$" 문자 그대로 해석하게  
해줍니다. 비슷하게 "\\"는 그냥 "\" 문자 그 자체를 나타냅니다. 
 
< POSIX 문자 클래스(POSIX Character Classes). [:class:] > 
일치하는 문자의 범위를 지정하는 다른 방법입니다. 
 
① [:alnum:] 는 알파벳이나 숫자와 일치하고 [A-Za-z0-9] 와 같은 표현입니다. 
② [:alpha:] 는 알파벳과 일치하고 [A-Za-z] 와 같은 표현입니다. 
③ [:blank:] 는 빈 칸이나 탭과 일치합니다. 
④ [:cntrl:] 는 제어 문자들과 일치합니다. 
⑤ [:digit:] 는 10진 숫자들과 일치하고 [0-9] 와 같은 표현입니다. 
⑥ [:graph:] (출력가능한 그래픽 문자들). 아스키 33 - 126 의 문자들과 일치합니다.  
빈 칸 문자가 포함되지 않는다는 것만 제외하고는 밑에서 설명할 [:print:] 와 같습니다. 
⑦ [:lower:] 는 알파벳 소문자와 일치하고 [a-z] 와 같은 표현입니다. 
⑧ [:print:] (출력 가능한 문자들). 아스키 32 - 126 까지의 문자들과 일치합니다.  
위에서 설명한 [:graph:] 와 같지만 빈 칸 문자가 포함되어 있습니다. 
⑨ [:space:] 는 공백문자들과 일치합니다(빈 칸, 수평탭). 
⑩ [:upper:] 는 알파벳 대문자와 일치하고 [A-Z] 와 같은 표현입니다. 
⑪ [:xdigit:] 는 16진수 숫자와 일치하고 [0-9A-Fa-f] 와 같은 표현입니다.