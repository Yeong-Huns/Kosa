DROP TABLE T1 PURGE;

CREATE TABLE T1(NO NUMBER);
SELECT * FROM TAB;
DESC T1;

select * from tab;

purge RECYCLEBIN;

SET SERVEROUTPUT ON; -- 하기 전까지 출력이 안됨!
BEGIN
    DBMS_OUTPUT.PUT_LINE('HELLO PL/SQL');
END;
/

DECLARE -- 선언부
V_EMPNO NUMBER(4) := 7788; -- 변수명 : V_EMPNO, 타입 : NUMBER(길이) = 7788;
V_ENAME VARCHAR2(10); -- 변수명 : V_ENAME, 타입 : VARCHAR2(길이);
/*
VARCHAR 와 VARCHAR2 의 차이가 뭐지? 
-> 현재는 완전 동일한 기능이지만 VARCHAR2 사용 강력권장!!!!  
WHY? -> VARCHAR 데이터 타입은 추후 ORACLE이 변경 예정이라함 
*/
BEGIN -- 실행부
    V_ENAME := 'SCOTT'; -- V_NAME, 타입 : VARCHAR2(10) = 'SCOTT'
    -- DBMS_OUTPUT.PUT_LINE('V_EMPNO: '|| V_EMPNO);
    DBMS_OUTPUT.PUT_LINE('V_ENAME: '|| V_ENAME);
END;
/
/*
결과 예상 : 선언부(DECLARE)에서 선언한 변수를 실행부(BEGIN) 에서 
        DBMS_OUTPUT.PUT_LINE() 으로 출력하는 구조
        V_EMPNO = 7788, V_ENAME = SCOTT(실행부에 지정)
        주석처리된 V_EMPNO 는 출력되지 않고 SCOTT만 출력될듯?
*/

DECLARE 
    V_EMPNO NUMBER(4) := 4885;
    V_ENAME VARCHAR2(10);
BEGIN
    V_ENAME := 'SMART';
    DBMS_OUTPUT.PUT_LINE('V_EMPNO : '||V_EMPNO);
    DBMS_OUTPUT.PUT_LINE('V_ENAME : '||V_ENAME);
END;
/

DECLARE 
    V_TAX CONSTANT NUMBER(1) := 3;
BEGIN
    DBMS_OUTPUT.PUT_LINE('V_TAX : '||V_TAX);
END;
/

DECLARE
    V_DEPTNO NUMBER(2) DEFAULT 10;
BEGIN 
    DBMS_OUTPUT.PUT_LINE('V_DEPTNO : '||V_DEPTNO);
END;
/

DECLARE 
    V_DEPNO NUMBER(2) NOT NULL DEFAULT 10;
BEGIN
    DBMS_OUTPUT.PUT_LINE('V_DEPNO : '||V_DEPNO);
END;
/
-- 이거 := 랑 DEFAULT 랑 똑같은거 아냐? 
-- 맞네..

DECLARE 
    V_DEPTNO DEPT.DEPTNO%TYPE := 50;
BEGIN
    DBMS_OUTPUT.PUT_LINE('V_DEPTNO : '||V_DEPTNO);
END;
/
SELECT * FROM DEPT;

DECLARE
    V_DEPT_ROW DEPT%ROWTYPE;
BEGIN
    SELECT DEPTNO, DNAME, LOC INTO V_DEPT_ROW 
    FROM DEPT
    WHERE DEPTNO = 40;
    DBMS_OUTPUT.PUT_LINE('DEPTNO : '||V_DEPT_ROW.DEPTNO);
    DBMS_OUTPUT.PUT_LINE('DNAME : '||V_DEPT_ROW.DNAME);
    DBMS_OUTPUT.PUT_LINE('LOC : '||V_DEPT_ROW.LOC);
END;
/
SHOW ERRORS;
SET SERVEROUTPUT ON;

DECLARE 
    V_NUM NUMBER DEFAULT 0;
BEGIN
    LOOP
        DBMS_OUTPUT.PUT_LINE('현재 V_NUM : '||V_NUM);
        V_NUM := V_NUM + 1;
    IF 
        V_NUM > 4 
    THEN
        EXIT;
    END IF;
    END LOOP;
END;
/

DECLARE 
    V_NUM NUMBER := 0; 
BEGIN 
    LOOP 
        DBMS_OUTPUT.PUT_LINE('*');
        V_NUM := V_NUM + 1 ;    
    IF 
        V_NUM > 4
    THEN
        EXIT;
    END IF;
    END LOOP;
END;
/

DECLARE 
    V_NUM NUMBER := 1;
    V_STR VARCHAR2(20) DEFAULT NULL;
BEGIN 
    LOOP
        V_STR := '*'||V_STR;
        DBMS_OUTPUT.PUT_LINE(V_STR);
        V_NUM := V_NUM + 1;
    EXIT WHEN V_NUM > 8;
    END LOOP;
END;
/

DECLARE 
    V_STR VARCHAR2(20) DEFAULT NULL;
BEGIN
    FOR I IN 1..10 LOOP
        V_STR := '*'||V_STR;
        DBMS_OUTPUT.PUT_LINE(V_STR);
    END LOOP;
END;
/

DECLARE
    STR VARCHAR2(20) DEFAULT NULL;
BEGIN
    FOR I IN 1..10 LOOP
    STR := NULL;
        FOR J IN  I..10 LOOP
        STR := '*'||STR;
        END LOOP;
    DBMS_OUTPUT.PUT_LINE(STR);
    END LOOP;
END;
/
    -- 거꾸로 별찍기 

DECLARE 
    V_NUM NUMBER DEFAULT 0; 
BEGIN
    WHILE V_NUM < 4 LOOP
     DBMS_OUTPUT.PUT_LINE('NUMBER : '||V_NUM);
     V_NUM := V_NUM + 1;
    END LOOP;
END;
/




BEGIN
    FOR I IN 1..10 LOOP
        CONTINUE WHEN MOD(I,2 ) = 1;
        DBMS_OUTPUT.PUT_LINE('NUMBER : '||I);
    END LOOP;
END;
/
-- 1~ 10 짝수출력 (CONTINUE)


DECLARE 
    SCORE NUMBER DEFAULT 98;
BEGIN
    IF SCORE = 100 THEN DBMS_OUTPUT.PUT_LINE('A+');
    ELSIF SCORE >= 90 THEN DBMS_OUTPUT.PUT_LINE('A');
    ELSIF SCORE >= 80 THEN DBMS_OUTPUT.PUT_LINE('B'); 
    ELSIF SCORE >= 70 THEN DBMS_OUTPUT.PUT_LINE('C');
    ELSIF SCORE >= 60 THEN DBMS_OUTPUT.PUT_LINE('D');
    ELSE DBMS_OUTPUT.PUT_LINE('F');
    END IF;
END;
/
    

DECLARE 
    SCORE NUMBER DEFAULT 75;
BEGIN
    CASE TRUNC(SCORE/10) -- TRUNC : 소수점 버림
    WHEN 10 THEN DBMS_OUTPUT.PUT_LINE('A+');
    WHEN 9 THEN DBMS_OUTPUT.PUT_LINE('A');
    WHEN 8 THEN DBMS_OUTPUT.PUT_LINE('B');
    WHEN 7 THEN DBMS_OUTPUT.PUT_LINE('C');
    WHEN 6 THEN DBMS_OUTPUT.PUT_LINE('D');
    ELSE DBMS_OUTPUT.PUT_LINE('F');
    END CASE;
END;
/ 
-- 학점계산

DECLARE 
    SCORE NUMBER DEFAULT 84;
BEGIN 
    CASE
        WHEN SCORE = 100 THEN DBMS_OUTPUT.PUT_LINE('A+');
        WHEN SCORE >= 90 THEN DBMS_OUTPUT.PUT_LINE('A');
        WHEN SCORE >= 80 THEN DBMS_OUTPUT.PUT_LINE('B');
        WHEN SCORE >= 70 THEN DBMS_OUTPUT.PUT_LINE('C');
        WHEN SCORE >= 60 THEN DBMS_OUTPUT.PUT_LINE('D');
        ELSE DBMS_OUTPUT.PUT_LINE('F');
    END CASE;
END;
/
-- 위랑 동일 

DECLARE 
    V_NUM NUMBER DEFAULT 13;
BEGIN 
    IF MOD(V_NUM , 2) = 1 THEN
    DBMS_OUTPUT.PUT_LINE('홀수');
    END IF;
END;
/

DECLARE 
    V_NUM NUMBER DEFAULT 15;
BEGIN 
    IF MOD(V_NUM , 2) = 0  THEN
    DBMS_OUTPUT.PUT_LINE('짝수');
    ELSE 
    DBMS_OUTPUT.PUT_LINE('홀수');
    END IF;
END;
/

-- IF ELSE

BEGIN 
    FOR I IN 1..10 LOOP
    CONTINUE WHEN MOD(I, 2) = 0;
    DBMS_OUTPUT.PUT_LINE('NUMBER : '||I);
    END LOOP;
END;
/

SELECT DNAME FROM DEPT WHERE DEPTNO = 10;

DECLARE 
    V_DEPTNO DEPT.DEPTNO%TYPE := 20;
    V_DNAME DEPT.DNAME%TYPE;
BEGIN  
    SELECT DNAME INTO V_DNAME
    FROM DEPT 
    WHERE DEPTNO = V_DEPTNO;
    DBMS_OUTPUT.PUT_LINE('DNAME : '||V_DNAME);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('DNAME : '||'N/A');
END;
/
-- DEPTNO 값이 존재하면 DNAME을 출력 , 만약 없다면 N/A 출력 


-- 레코드

DECLARE 
    TYPE REC_DEPT IS RECORD(
        D_NUM NUMBER NOT NULL := 90,
        D_NAME DEPT.DNAME%TYPE,
        D_LOC DEPT.LOC%TYPE
    );
    REC REC_DEPT;
BEGIN
    REC.D_NUM := 55;
    REC.D_NAME := 'ORACLE';
    REC.D_LOC := 'YOUNGIN';
    DBMS_OUTPUT.PUT_LINE('D_NUM : '||REC.D_NUM);
    DBMS_OUTPUT.PUT_LINE('D_NAME : '||REC.D_NAME);
    DBMS_OUTPUT.PUT_LINE('D_LOC : '||REC.D_LOC);
END;
/

CREATE TABLE TEMP_RECORD_EXAMPLE
AS SELECT * FROM DEPT;
-- 테이블 만들기
SELECT * FROM TEMP_RECORD_EXAMPLE;

DECLARE 
    TYPE REC IS RECORD(
        V_ROW DEPT%ROWTYPE
    );
    TP REC;
BEGIN
    SELECT * INTO TP.V_ROW
    FROM DEPT
    WHERE DEPTNO = 10;
    DBMS_OUTPUT.PUT_LINE(TP.V_ROW.DEPTNO);
END;
/
    
DECLARE 
    TYPE TP IS RECORD(
    DNUM NUMBER DEFAULT 0,
    DNAME DEPT.DNAME%TYPE,
    DLOC DEPT.LOC%TYPE
    );
    T TP;
BEGIN
    T.DNUM := 99;
    T.DNAME := 'HONGGILDONG';
    T.DLOC := 'SEOUL';
    
    INSERT INTO TEMP_RECORD_EXAMPLE
    VALUES T;
END;
/
-- 레코드 INSERT

DECLARE 
    TYPE TP IS RECORD(
    VNUM NUMBER NOT NULL DEFAULT 0,
    VNAME DEPT.DNAME%TYPE,
    VLOC DEPT.LOC%TYPE
    );
    T TP;
BEGIN
    T.VNUM := 98;
    T.VNAME := '흥민';
    T.VLOC := '영국';
    
    UPDATE TEMP_RECORD_EXAMPLE
    SET ROW = T
    WHERE DEPTNO = 99;
END;
/
SELECT * FROM TEMP_RECORD_EXAMPLE;
-- UPDATE RECORD

DECLARE 
    TYPE TP1 IS RECORD(
        ANUM DEPT.DEPTNO%TYPE,
        ANAME DEPT.DNAME%TYPE,
        ALOC DEPT.LOC%TYPE
    );
    TYPE TP2 IS RECORD(
        BNUM EMP.EMPNO%TYPE,
        BNAME EMP.ENAME%TYPE,
        BINFO TP1
    );
    T2 TP2;
BEGIN
    SELECT E.EMPNO, E.ENAME, D.DEPTNO, D.DNAME, D.LOC 
    INTO T2.BNUM, T2.BNAME, T2.BINFO.ANUM, T2.BINFO.ANAME, T2.BINFO.ALOC
    FROM EMP E, DEPT D
    WHERE E.DEPTNO = D.DEPTNO
    AND E.EMPNO = 7788;
    DBMS_OUTPUT.PUT_LINE('EMPNO : '||T2.BNUM);
    DBMS_OUTPUT.PUT_LINE('ENAME : '||T2.BNAME);
    
    DBMS_OUTPUT.PUT_LINE('DEPTNO : '||T2.BINFO.ANUM);
    DBMS_OUTPUT.PUT_LINE('DNAME : '||T2.BINFO.ANAME);
    DBMS_OUTPUT.PUT_LINE('DLOC: '||T2.BINFO.ALOC);
END;
/
-- 레코드를 포함하는 레코드
SELECT * FROM  DEPT D;
SELECT * FROM EMP E;

DECLARE 
    TYPE REC1 IS RECORD(
        DNUM DEPT.DEPTNO%TYPE,
        DNAME DEPT.DNAME%TYPE,
        DLOC DEPT.LOC%TYPE
    );
    TYPE REC2 IS RECORD(
        ENUM EMP.EMPNO%TYPE,
        ENAME EMP.ENAME%TYPE,
        EJOB EMP.JOB%TYPE,
        R1 REC1
    );
    EMP_REC REC2;
BEGIN
    SELECT D.DEPTNO, D.DNAME, D.LOC, E.EMPNO, E.ENAME, E.JOB 
    INTO EMP_REC.R1.DNUM, EMP_REC.R1.DNAME, EMP_REC.R1.DLOC, EMP_REC.ENUM, EMP_REC.ENAME, EMP_REC.EJOB 
    FROM EMP E, DEPT D
    WHERE E.DEPTNO = D.DEPTNO
    AND E.EMPNO = 7839;
    
    DBMS_OUTPUT.PUT_LINE('사원번호 : '||EMP_REC.ENUM);
    DBMS_OUTPUT.PUT_LINE('사원이름 : '||EMP_REC.ENAME);
    DBMS_OUTPUT.PUT_LINE('직   업 : '||EMP_REC.EJOB);
    DBMS_OUTPUT.PUT_LINE('부서번호 : '||EMP_REC.R1.DNUM);
    DBMS_OUTPUT.PUT_LINE('부서이름 : '||EMP_REC.R1.DNAME);
    DBMS_OUTPUT.PUT_LINE('부서위치 : '||EMP_REC.R1.DLOC);
END;
/
--나의 레코드 안 레코드 예제

DECLARE 
	TYPE TAB_EX IS TABLE OF VARCHAR2(20)
INDEX BY PLS_INTEGER;

	TT TAB_EX;
BEGIN 
	TT(1) := '첫 번째 데이터';
	TT(2) := '두 번째 데이터';
	TT(3) := '세 번째 데이터';
	TT(4) := '네 번째 데이터';

	DBMS_OUTPUT.PUT_LINE('TT(1) : '||TT(1));
	DBMS_OUTPUT.PUT_LINE('TT(2) : '||TT(2));
	DBMS_OUTPUT.PUT_LINE('TT(3) : '||TT(3));
	DBMS_OUTPUT.PUT_LINE('TT(4) : '||TT(4));
END;
/

SELECT * FROM DEPT;

DECLARE 
	TYPE REC1 IS RECORD(
		DNUM DEPT.DEPTNO%TYPE,
		DNAME DEPT.DNAME%TYPE
	);
	TYPE TAB1 IS TABLE OF REC1
		INDEX BY PLS_INTEGER;

	TT TAB1;
	IDX PLS_INTEGER := 0;

BEGIN 
	FOR I IN (SELECT DEPTNO, DNAME FROM DEPT) LOOP
	IDX := IDX + 1;
	TT(IDX).DNUM := I.DEPTNO;
	TT(IDX).DNAME := I.DNAME;

	DBMS_OUTPUT.PUT_LINE(
	IDX||' : '||TT(IDX).DNUM|| ' : ' || TT(IDX).DNAME 
	);
	END LOOP;
END;
/

DECLARE 
	TYPE TAB1 IS TABLE OF DEPT%ROWTYPE
	INDEX BY PLS_INTEGER;
TT TAB1;
IDX PLS_INTEGER := 0;

BEGIN 
	FOR I IN (SELECT * FROM DEPT) LOOP
	IDX := IDX + 1;
	TT(IDX).DEPTNO:= I.DEPTNO; 
	TT(IDX).DNAME := I.DNAME;
	TT(IDX).LOC := I.LOC;
	DBMS_OUTPUT.PUT_LINE(
	'부서 번호 : '||TT(IDX).DEPTNO||
	'/ 부서 이름 : '||TT(IDX).DNAME||
	'/ 지역 명 : '||TT(IDX).LOC
	);
	END LOOP;
END;
/
SET SERVEROUTPUT ON;


SELECT * FROM DEPT;

DECLARE
    TYPE TAB1 IS TABLE OF DEPT%ROWTYPE
    INDEX BY PLS_INTEGER;
    TT TAB1;
    IDX PLS_INTEGER := 0;
BEGIN
    FOR I IN (SELECT * FROM DEPT) LOOP
    IDX := IDX + 1;
    TT(IDX).DEPTNO := I.DEPTNO;
    TT(IDX).DNAME := I.DNAME;
    TT(IDX).LOC := I.LOC;
    DBMS_OUTPUT.PUT_LINE(
    TT(IDX).DEPTNO||' : '||TT(IDX).DNAME||' : '||TT(IDX).LOC
    );
    END LOOP;
END;
/

DECLARE 
	TYPE TAB1 IS TABLE OF VARCHAR2(20)
	INDEX BY PLS_INTEGER;
	T1 TAB1;
BEGIN 
	T1(1) := '일번';
	T1(2) := '이번';
	T1(3) := '삼번';
	T1(50) := '오십번';
	DBMS_OUTPUT.PUT_LINE('COUNT : '||T1.COUNT);
	DBMS_OUTPUT.PUT_LINE('FIRST : '||T1.FIRST);
	DBMS_OUTPUT.PUT_LINE('LAST : '||T1.LAST);
	DBMS_OUTPUT.PUT_LINE('PRIOR(50) : '||T1.PRIOR(50));
	DBMS_OUTPUT.PUT_LINE('NEXT(50) : '||T1.NEXT(50));
END;
/

CREATE TABLE EXAMPLE_TABLE AS SELECT * FROM EMP;
SELECT * FROM EXAMPLE_TABLE;

DECLARE 
    TYPE REC1 IS RECORD(
    ENUM EMP.EMPNO%TYPE,
    ENAME EMP.ENAME%TYPE,
    JOB EMP.JOB%TYPE,
    MGR EMP.MGR%TYPE,
    HIREDATE EMP.HIREDATE%TYPE,
    SAL EMP.SAL%TYPE,
    COMM EMP.COMM%TYPE,
    DEPTNO EMP.DEPTNO%TYPE
    );
    REC REC1;
BEGIN
    REC.ENUM := 1111;
    REC.ENAME := 'TEST_USER';
    REC.JOB := 'TEST_JOB';
    REC.MGR := NULL;
    REC.HIREDATE := TO_DATE('20180301','YYYYMMDD');
    REC.SAL := 3000;
    REC.DEPTNO := 40;
    INSERT INTO EXAMPLE_TABLE VALUES REC;
END;
/

-- 일요일 START


SET SERVEROUTPUT ON;

SELECT * FROM TAB;
SELECT * FROM EMP;

DECLARE 
    TYPE TAB1 IS TABLE OF EMP%ROWTYPE
    INDEX BY PLS_INTEGER;
    TT TAB1;
    IDX PLS_INTEGER := 0;
BEGIN
    FOR I IN (SELECT * FROM EMP) LOOP
    IDX := IDX + 1;
    TT(IDX).EMPNO := I.EMPNO;
    TT(IDX).ENAME := I.ENAME;
    TT(IDX).JOB := I.JOB;
    TT(IDX).MGR := I.MGR;
    TT(IDX).HIREDATE := I.HIREDATE;
    TT(IDX).SAL := I.SAL;
    TT(IDX).COMM := I.COMM;
    TT(IDX).DEPTNO := I.DEPTNO;
    DBMS_OUTPUT.PUT_LINE(
        TT(IDX).EMPNO||' : '||TT(IDX).ENAME||' : '||TT(IDX).JOB||' : '||TT(IDX).MGR||' : '||TT(IDX).HIREDATE||' : '||TT(IDX).SAL||' : '||TT(IDX).COMM||' : '||TT(IDX).DEPTNO
    );
    END LOOP;
END;
/

SELECT * FROM DEPT;

DECLARE 
    D_ROW DEPT%ROWTYPE;
BEGIN
    SELECT DEPTNO, DNAME, LOC INTO D_ROW
    FROM DEPT
    WHERE DEPTNO = 40;
    DBMS_OUTPUT.PUT_LINE('부서 번호 : '||D_ROW.DEPTNO);
	DBMS_OUTPUT.PUT_LINE('부서 이름 : '||D_ROW.DNAME);
	DBMS_OUTPUT.PUT_LINE('지역 : '||D_ROW.LOC);
END;
/


DECLARE 
    D_ROW DEPT%ROWTYPE;
    CURSOR C1 IS
    SELECT DEPTNO, DNAME, LOC
    FROM DEPT
    WHERE DEPTNO = 40;
BEGIN 
    OPEN C1;
    FETCH C1 INTO D_ROW; 
    DBMS_OUTPUT.PUT_LINE(D_ROW.DEPTNO||' : '||D_ROW.DNAME||' : '||D_ROW.LOC);
    CLOSE C1;
END;
/


DECLARE 
    D_ROW DEPT%ROWTYPE;
    CURSOR C1 IS
    SELECT * FROM DEPT WHERE DEPTNO = 40;
BEGIN
    OPEN C1;
    FETCH C1 INTO D_ROW;
    DBMS_OUTPUT.PUT_LINE(D_ROW.DEPTNO||' : '||D_ROW.DNAME||' : '||D_ROW.LOC);
    CLOSE C1;
END;
/


DECLARE 
--커서 데이터를 입력할 수 있는 변수 선언
D_ROW DEPT%ROWTYPE;
--커서 DECLARATION 
CURSOR C1 IS
	SELECT * FROM DEPT;
BEGIN
--OPEN
OPEN C1;
	LOOP
	FETCH C1 INTO D_ROW;
	EXIT WHEN C1%NOTFOUND;
	DBMS_OUTPUT.PUT_LINE(D_ROW.DEPTNO||' : '||D_ROW.DNAME||' : '||D_ROW.LOC);
	END LOOP;
CLOSE C1;
END;
/


DECLARE 
--커서 데이터를 입력할 수 있는 변수 선언
D_ROW DEPT%ROWTYPE;
--커서 DECLARATION 
CURSOR C1 IS
	SELECT * FROM DEPT;
BEGIN
--OPEN
OPEN C1;
	LOOP
	FETCH C1 INTO D_ROW;
	EXIT WHEN C1%NOTFOUND;
	DBMS_OUTPUT.PUT_LINE(D_ROW.DEPTNO||' : '||D_ROW.DNAME||' : '||D_ROW.LOC);
	END LOOP;
CLOSE C1;
END;
/

DECLARE 
  D_ROW DEPT%ROWTYPE;
  CURSOR C1 IS
    SELECT * FROM DEPT;
BEGIN
  OPEN C1;
  LOOP
    FETCH C1 INTO D_ROW;
    EXIT WHEN C1%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(D_ROW);
  END LOOP;
  CLOSE C1;
END;
/


DECLARE    
    CURSOR C1 IS 
    SELECT * FROM DEPT;
BEGIN
    FOR I IN C1() LOOP
    DBMS_OUTPUT.PUT_LINE(I.DEPTNO||' : '||I.DNAME||' : '||I.LOC);
    END LOOP;
END;
/

DECLARE 
--명.커(명시적커서)
CURSOR C1 IS 
SELECT * FROM DEPT;
BEGIN 
--FOR LOOP
FOR I IN C1() LOOP
DBMS_OUTPUT.PUT_LINE('번호 : '||I.DEPTNO||', 이름 : '||I.DNAME||', 지역 : '||I.LOC);
END LOOP;
END;
/


DECLARE 
	--커.변(커서 데이터를 입력할 변수)
	D_ROW DEPT%ROWTYPE;
	--명.커
	CURSOR C1(D_NUM DEPT.DEPTNO%TYPE) IS 
	SELECT DEPTNO, DNAME, LOC 
	FROM DEPT 
	WHERE DEPTNO = D_NUM;
BEGIN 
	--10번(부서번호)을 대입
	OPEN C1(10); LOOP --OPEN
	FETCH C1 INTO D_ROW;
	EXIT WHEN C1%NOTFOUND;
	DBMS_OUTPUT.PUT_LINE('번호 : '||D_ROW.DEPTNO||' 이름 : '||D_ROW.DNAME||' 장소 : '||D_ROW.LOC);
	END LOOP;
	CLOSE C1;
	--20번 부서
	FOR I IN C1(20) LOOP
	DBMS_OUTPUT.PUT_LINE('번호 : '||I.DEPTNO||' 이름 : '||I.DNAME||' 장소 : '||I.LOC);
	END LOOP;
END;
/

DECLARE 
--사용자가 입력한 부서 번호를 저장하는 변수
I_NUM DEPT.DEPTNO%TYPE;
CURSOR C1 (D_NUM DEPT.DEPTNO%TYPE) IS 
SELECT DEPTNO, DNAME, LOC 
FROM DEPT 
WHERE DEPTNO = D_NUM;
BEGIN 
--I_NUM 입력값 받고 , D_NUM 으로 넘겨준다.
I_NUM := &INPUT_DEPTNO;
--FOR LOOP
FOR I IN C1(I_NUM) LOOP
DBMS_OUTPUT.PUT_LINE('번호 : '||I.DEPTNO||' 이름 : '||I.DNAME||' 지역 : '||I.LOC);
END LOOP;
END;
/
