SELECT * FROM PRODUCTS;

SET SERVEROUTPUT ON;

-- 1 전통적인 방법
CREATE OR REPLACE PROCEDURE MY_PROC1(P_ID PRODUCTS.PRODUCT_ID%TYPE) IS
    V_PRODUCT_NAME PRODUCTS.PRODUCT_NAME%TYPE;
    V_DESCRIPTION PRODUCTS.DESCRIPTION%TYPE;

BEGIN 
    SELECT PRODUCT_NAME, DESCRIPTION INTO V_PRODUCT_NAME, V_DESCRIPTION
    FROM PRODUCTS
    WHERE PRODUCT_ID = P_ID;
    DBMS_OUTPUT.PUT_LINE('제품번호 : '||P_ID||', 제품이름 : '||V_PRODUCT_NAME||', 제품상세 : '||V_DESCRIPTION);
END;
/
EXEC MY_PROC1(249);


-- 2 레코드를 이용하는 방법
CREATE OR REPLACE PROCEDURE MY_PROC2(P_ID PRODUCTS.PRODUCT_ID%TYPE) IS
    PRODUCT_REC PRODUCTS%ROWTYPE;
BEGIN 
    SELECT * INTO PRODUCT_REC
    FROM PRODUCTS
    WHERE PRODUCT_ID = P_ID;
    DBMS_OUTPUT.PUT_LINE('제품번호 : '||P_ID||', 제품이름 : '||PRODUCT_REC.PRODUCT_NAME||', 제품상세 : '||PRODUCT_REC.DESCRIPTION);
END;
/
EXEC MY_PROC2(249);


-- 3 커스텀 레코드를 이용하는 방법
CREATE OR REPLACE PROCEDURE MY_PROC3(P_ID PRODUCTS.PRODUCT_ID%TYPE) IS
    TYPE REC IS RECORD(
        PRODUCT_NAME PRODUCTS.PRODUCT_NAME%TYPE,
        DESCRIPTION PRODUCTS.DESCRIPTION%TYPE
    );
    PRODUCT_REC REC;
BEGIN 
    SELECT PRODUCT_NAME, DESCRIPTION  INTO PRODUCT_REC.PRODUCT_NAME, PRODUCT_REC.DESCRIPTION
    FROM PRODUCTS
    WHERE PRODUCT_ID = P_ID;
    DBMS_OUTPUT.PUT_LINE('제품번호 : '||P_ID||', 제품이름 : '||PRODUCT_REC.PRODUCT_NAME||', 제품상세 : '||PRODUCT_REC.DESCRIPTION);
END;
/
EXEC MY_PROC3(249);


-- 4 패키지를 이용하는 방법
CREATE OR REPLACE PACKAGE MY_PRODUCTS_PACK IS 
    TYPE REC IS RECORD(
        PRODUCT_NAME PRODUCTS.PRODUCT_NAME%TYPE,
        DESCRIPTION PRODUCTS.DESCRIPTION%TYPE
    );
END;
/
--패키지 생성
CREATE OR REPLACE PROCEDURE MY_PROC4(P_ID PRODUCTS.PRODUCT_ID%TYPE) IS
    PRODUCT_REC MY_PRODUCTS_PACK.REC;
BEGIN 
    SELECT PRODUCT_NAME, DESCRIPTION  INTO PRODUCT_REC.PRODUCT_NAME, PRODUCT_REC.DESCRIPTION
    FROM PRODUCTS
    WHERE PRODUCT_ID = P_ID;
    DBMS_OUTPUT.PUT_LINE('제품번호 : '||P_ID||', 제품이름 : '||PRODUCT_REC.PRODUCT_NAME||', 제품상세 : '||PRODUCT_REC.DESCRIPTION);
END;
/
--프로시저 생성
EXEC MY_PROC4(249);


-- 5 테이블을 이용하는 방법
CREATE OR REPLACE PROCEDURE MY_PROC5(P_CATEGORY_ID PRODUCTS.CATEGORY_ID%TYPE) IS
    TYPE TAB IS TABLE OF PRODUCTS.PRODUCT_ID%TYPE 
    INDEX BY PLS_INTEGER;
PRODUCTS_TAB TAB;

BEGIN 
    SELECT PRODUCT_ID BULK COLLECT INTO PRODUCTS_TAB
    FROM PRODUCTS
    WHERE CATEGORY_ID = P_CATEGORY_ID;

    FOR IDX IN PRODUCTS_TAB.FIRST .. PRODUCTS_TAB.LAST LOOP
        DBMS_OUTPUT.PUT_LINE('카테고리 : '||P_CATEGORY_ID||', 제품번호 : '||PRODUCTS_TAB(IDX));
    END LOOP;
END;
/
EXEC MY_PROC5(4); -- 4번 카테고리에 속하는 제품번호 ~~


-- 6 레코드와 테이블을 함께 이용하는 방법
CREATE OR REPLACE PROCEDURE MY_PROC6(P_CATEGORY_ID PRODUCTS.CATEGORY_ID%TYPE) IS
    TYPE REC IS RECORD(
        PRODUCT_ID PRODUCTS.PRODUCT_ID%TYPE,
        PRODUCT_NAME PRODUCTS.PRODUCT_NAME%TYPE,
        DESCRIPTION PRODUCTS.DESCRIPTION%TYPE
    );
    TYPE TAB IS TABLE OF REC
    INDEX BY PLS_INTEGER;
PRODUCTS_TAB TAB;

BEGIN 

    SELECT PRODUCT_ID ,PRODUCT_NAME, DESCRIPTION BULK COLLECT INTO PRODUCTS_TAB
    FROM PRODUCTS
    WHERE CATEGORY_ID = P_CATEGORY_ID;
    DBMS_OUTPUT.PUT_LINE('====='||P_CATEGORY_ID||'번 카테고리에 속한 제품군=====');

    FOR IDX IN PRODUCTS_TAB.FIRST .. PRODUCTS_TAB.LAST LOOP
        DBMS_OUTPUT.PUT_LINE('제품번호 : '||PRODUCTS_TAB(IDX).PRODUCT_ID||
        ', 제품이름 : '||PRODUCTS_TAB(IDX).PRODUCT_NAME||
        ', 제품상세 : '||PRODUCTS_TAB(IDX).DESCRIPTION);
        DBMS_OUTPUT.PUT_LINE('');
    END LOOP;
END;
/
EXEC MY_PROC6(4);





